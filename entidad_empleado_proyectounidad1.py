# -*- coding: utf-8 -*-
"""Entidad_Empleado_ProyectoUnidad1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bjQUw2yuiRdxvB94TewMQGaMuB4A08yH
"""

!pip install Faker
import pandas as pd
import uuid
import random
from faker import Faker
import datetime

num_usuarios = 5000

# A list of 10 features
features = [
    "id_Empleado",
    "Nombre_Empleado",
    "Genero_Empleado",
    "Descripcion_Empleado", 
    "Fecha_Nacimiento",
    "Edad_Empleado",
    "Status_Empleado" 

]# Creating a DF for these features
df = pd.DataFrame(columns=features)

df['id_Empleado'] = [uuid.uuid4().hex for i in range(num_usuarios)]

print(df['id_Empleado'].nunique()==num_usuarios)

#Al ser un proyecto basado en el estado unicamente receptaremos datos de genero binario
generos = ["Masculino", "Femenino"]

df['Genero_Empleado'] = random.choices(
    generos, 
    weights=(2500,2500), 
    k=num_usuarios
)

faker = Faker()

def name_gen(gender):
    """
    Quickly generates a name based on gender
    """
    if gender=='Masculino':
        return faker.name_male()
    elif gender=='Femenino':
        return faker.name_female()
    
    return faker.name()# Generating names for each user
df['Nombre_Empleado'] = [name_gen(i) for i in df['Genero_Empleado']]

df['Descripcion_Empleado']=[faker.sentence() for i in range(num_usuarios)]

def random_dob(start, end, n):
    """
    Generating a list of a set number of timestamps
    """
    
    # The timestamp format
    frmt = "%Y-%m-%d"
    
    # Formatting the two time periods
    stime = datetime.datetime.strptime(start, frmt)
    etime = datetime.datetime.strptime(end, frmt)
    
    # Creating the pool for random times
    td = etime - stime
    
    # Generating a list with the random times
    times = [(random.random() * td + stime).strftime(frmt) for _ in range(n)]
    
    return times

df['Fecha_Nacimiento'] = random_dob("1960-01-01", "2000-01-01", num_usuarios)

def getEdad(Fecha_Nacimiento):
    
    # Current date
    now = datetime.datetime.now()
    
    # Date of birth
    dob = datetime.datetime.strptime(Fecha_Nacimiento, "%Y-%m-%d")
    
    # Subtracting the times to get an age
    age = int((now - dob).days/365.25)
    
    return age

df['Edad_Empleado'] = [getEdad(i)  for i in df['Fecha_Nacimiento']]

Status= ["Aceptado", "Rechazado", "Pendiente"]

df['Status_Empleado'] = random.choices(Status, weights=(3000,1000,1000), k=num_usuarios)

df.to_csv('Empleados_usuarios.csv')