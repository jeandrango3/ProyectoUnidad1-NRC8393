# -*- coding: utf-8 -*-
"""Entidad_Beneficiario_ProyectoUnidad1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mN7Uaoi-9a6CbbBUrrktZGuai2jbyag4
"""
#Importamos e instalamos las librerias necesarias
!pip install Faker
#Nos ayuda a crear un dataframe
import pandas as pd
#genera una cadena aleatoria de numeros
import uuid
#Crea datos random
import random
#genera datos falsos
from faker import Faker
#Nos ayuda a trabajar con la fecha y la hora 
import datetime

# Creamos una lista con los atributos de la entidad Beneficiario 
features = [
    "id_Beneficiario",
    "Nombre_Beneficiario",
    "Genero_Beneficiario",
    "Fecha_Nacimiento_Be",
    "Edad_Beneficiario",

]# Ordenamos nuestra dataframe , es decir que los atributos se van a volver columnas 
df = pd.DataFrame(columns=features)

#Definimos el numero de datos que deseamos visualizar
num_usuarios = 5000
#Creamos id aleatorios 
df['id_Beneficiario'] = [uuid.uuid4().hex for i in range(num_usuarios)]

#Se verifica que el id creado sea unico 
print(df['id_Beneficiario'].nunique()==num_usuarios)

#Al ser un proyecto basado en el estado unicamente receptaremos datos de genero binario
generos = ["Masculino", "Femenino"]

df['Genero_Beneficiario'] = random.choices(
    generos, 
    weights=(2500,2500), 
    k=num_usuarios
)

faker = Faker()

def name_gen(gender):
    """
    Define nombres falsos basados en el genero
    
    parametros
    __________
    faker.name_male = nombre masculino 
    faker.name_female =nombre  femenino
    
    return
    names
    """
    if gender=='Masculino':
        return faker.name_male()
    elif gender=='Femenino':
        return faker.name_female()
    
    return faker.name()# Nombre para cada usuario 
df['Nombre_Beneficiario'] = [name_gen(i) for i in df['Genero_Beneficiario']]

def random_dob(start, end, n):
    """
    Genera una lista de fecha inicial y final 
    parametros:
    __________
    frmt = define el formato 
    stime= fecha inicio 
    etime= fehca final 
     
     return 
     
     times
    """
    
    # formato de la fecha 
    frmt = "%Y-%m-%d"
    
    # formato de los dos periodos
    stime = datetime.datetime.strptime(start, frmt)
    etime = datetime.datetime.strptime(end, frmt)
    
    td = etime - stime
    
    # Genera una lista de datos random 
    times = [(random.random() * td + stime).strftime(frmt) for _ in range(n)]
    
    return times

df['Fecha_Nacimiento_Be'] = random_dob("1960-01-01", "2000-01-01", num_usuarios)

def getEdad(Fecha_Nacimiento):
    """
        Calculamos la edad a traves de la fecha de nacimiento 
        
        parametros 
        _________
        fecha actual 
        fecha de cumpleaños
        
        return 
        
        edad
    """
    # fecha actual 
    now = datetime.datetime.now()
    
    # fecha de cumpleaños
    dob = datetime.datetime.strptime(Fecha_Nacimiento, "%Y-%m-%d")
    
    # Calculo de la edad 
    age = int((now - dob).days/365.25)
    
    return age

df['Edad_Beneficiario'] = [getEdad(i)  for i in df['Fecha_Nacimiento_Be']]

#definimos el documentodonde vamos a almacenar los datos 
df.to_csv('Empleados_usuarios.csv')
